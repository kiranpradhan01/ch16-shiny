install.packages("shiny")
# Load the `shiny` package (install it in the R terminal if you haven't already)
library(shiny)
fluidPage()
?fluidPage
# Define a new `ui` variable. This variable should be assigned a `fluidPage()`
# layout, which should be passed the following:
ui <- fluidPage(
# A top level header: "First Shiny Website"
h1("First Shiny Website"),
# A Paragraph, describing your excitement: include some `strong` text
p("I am strong(so) excited to finally create a UI withing R!"),
# An image with this `src`
# https://media2.giphy.com/media/l3q2Ip7FrmPE33EiI/giphy.gif
img("SO EXCITED", "https://media2.giphy.com/media/l3q2Ip7FrmPE33EiI/giphy.gif"),
# Another paragraph about a slider: include some `em` text
p("You can use this em(super cool) slider to show how em(excited) you are."),
# A slider with an appropriate label, min of 10, max of 100, value of 50
sliderInput(name = "excitement bar", label = "excitement bar", min = 10, max = 100, value = 50))
# Define a new `ui` variable. This variable should be assigned a `fluidPage()`
# layout, which should be passed the following:
ui <- fluidPage(
# A top level header: "First Shiny Website"
h1("First Shiny Website"),
# A Paragraph, describing your excitement: include some `strong` text
p("I am strong(so) excited to finally create a UI withing R!"),
# An image with this `src`
# https://media2.giphy.com/media/l3q2Ip7FrmPE33EiI/giphy.gif
img("SO EXCITED", "https://media2.giphy.com/media/l3q2Ip7FrmPE33EiI/giphy.gif"),
# Another paragraph about a slider: include some `em` text
p("You can use this em(super cool) slider to show how em(excited) you are."),
# A slider with an appropriate label, min of 10, max of 100, value of 50
sliderInput("excitement bar", "excitement bar", min = 10, max = 100, value = 50))
View(ui)
# Define a `server` function that accepts an input and an output
# At this point, don't do anything in the function
# This function should perform the following:
server <- function(input, output) {}
runApp('Desktop/INFO201/ch16-shiny/exercise-1')
# Create a new `shinyApp()` using the above ui and server
shinyApp(ui = ui, server = server)
runApp('Desktop/INFO201/ch16-shiny/exercise-1')
runApp('Desktop/INFO201/ch16-shiny/exercise-1')
runApp('Desktop/INFO201/ch16-shiny/exercise-1')
runApp('Desktop/INFO201/ch16-shiny/exercise-1')
runApp('Desktop/INFO201/ch16-shiny/exercise-1')
runApp('Desktop/INFO201/ch16-shiny/exercise-1')
runApp('Desktop/INFO201/ch16-shiny/exercise-1')
runApp('Desktop/INFO201/ch16-shiny/exercise-1')
runApp('Desktop/INFO201/ch16-shiny/exercise-1')
runApp('Desktop/INFO201/ch16-shiny/exercise-1')
# Create a new `shinyApp()` using the above ui and server
shinyApp(ui = ui, server = server)
runApp('Desktop/INFO201/ch16-shiny/exercise-2')
runApp('Desktop/INFO201/ch16-shiny/exercise-2')
runApp('Desktop/INFO201/ch16-shiny/exercise-2')
# Define a `server` function (with appropriate arguments)
# This function should perform the following:
server <- function(input, output) {
# Assign a reactive `renderText()` function to the output's `cost` value
# The reactive expression should return the input `price` times the `quantity`
# So it looks nice, paste a "$" in front of it!
output$cost <- renderText{
x <- input$price * input$quantity
x
}
}
# Create a new `shinyApp()` using the above ui and server
shinyApp(ui = ui, server = server)
runApp('Desktop/INFO201/ch16-shiny/exercise-2')
setwd("~/Desktop/INFO201/ch16-shiny/exercise-2")
runApp()
# Define a new `ui` variable. This variable should be assigned a `fluidPage()` layout
# The `fluidPage()` layout should be passed the following:
ui <- fluidPage(
# A `titlePanel()` layout with the text "Cost Calculator"
titlePanel("Cost Calculator"),
# A `numericInput()` widget with the label "Price (in dollars)"
# It should have a default value of 0 and a minimum value of 0
# Hint: look up the function's arguments in the documentation!
numericInput("price", label = "Price (in dollars)", value = 0, min = 0),
# A second `numericInput()` widget with the label "Quantity"
# It should have a default value of 1 and a minimum value of 1
numericInput("quantity", label = "Quantity", value = 1, min = 1),
# The word "Cost", strongly bolded
strong("Cost"),
# A `textOutput()` output of a calculated value labeled `cost`
textOutput("cost"))
# Define a `server` function (with appropriate arguments)
# This function should perform the following:
server <- function(input, output) {
# Assign a reactive `renderText()` function to the output's `cost` value
# The reactive expression should return the input `price` times the `quantity`
# So it looks nice, paste a "$" in front of it!
output$cost <- renderText{
x <- input$price * input$quantity
x
}
}
# Create a new `shinyApp()` using the above ui and server
shinyApp(ui = ui, server = server)
runApp()
